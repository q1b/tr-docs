import{_ as n,c as s,o as a,a as t}from"./app.1ca90fac.js";const p='{"title":"","description":"","frontmatter":{},"relativePath":"docs/sourceCode.md","lastUpdated":1632576310000}',o={},e=[t('<div class="language-jsx"><pre><code><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token keyword">function</span> <span class="token function">psr</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>transformObj<span class="token punctuation">,</span>property<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n\t<span class="token keyword">switch</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">case</span> <span class="token string">&#39;rotate&#39;</span><span class="token operator">:</span>\n\t\t\tprefix<span class="token operator">=</span><span class="token string">&#39;deg&#39;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isXOrY</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">//  translate3d(42px, -62px, -135px);</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">case</span> <span class="token string">&#39;scale&#39;</span><span class="token operator">:</span>\n\t\t\tprefix<span class="token operator">=</span><span class="token string">&#39;&#39;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isXOrY</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">case</span> <span class="token string">&#39;skew&#39;</span><span class="token operator">:</span>\n\t\t\tprefix<span class="token operator">=</span><span class="token string">&#39;deg&#39;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isXOrY</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">case</span> <span class="token string">&#39;translate&#39;</span><span class="token operator">:</span>\n\t\t\tprefix<span class="token operator">=</span><span class="token string">&#39;px&#39;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isXOrY</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>transformObj<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">3d(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isXOrY</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span> value<span class="token operator">===</span><span class="token string">&#39;x&#39;</span> <span class="token operator">||</span> value<span class="token operator">===</span><span class="token string">&#39;y&#39;</span> <span class="token operator">||</span> value<span class="token operator">===</span><span class="token string">&#39;z&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span>\n\t<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">splitClasses</span><span class="token punctuation">(</span><span class="token parameter">classes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">splitWithSeparator</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">splitWithSeparator</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> separator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\\\</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>separator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(?![^[]*\\\\])</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cvt</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> propsArray <span class="token operator">=</span> <span class="token function">splitClasses</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    tempObj<span class="token punctuation">[</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    propsArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">const</span> property <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        <span class="token keyword">const</span> value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token keyword">const</span> transformProperties <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;scale&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;rotate&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;skew&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;translate&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>transformProperties<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \ttempObj<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token function">psr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>tempObj<span class="token punctuation">.</span>transform<span class="token punctuation">,</span>property<span class="token punctuation">,</span>value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        \t<span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \t\t<span class="token keyword">case</span> property<span class="token operator">===</span><span class="token string">&#39;bg&#39;</span><span class="token operator">:</span>\n        \t\t\t<span class="token comment">// bg-transition and bg-[#555] are not type of colorName </span>\n        \t\t\t<span class="token keyword">let</span> AfterBg <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        \t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>AfterBg<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \t\t\t\t<span class="token keyword">let</span> colorValue <span class="token operator">=</span> AfterBg<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n        \t\t\t\ttempObj<span class="token punctuation">[</span><span class="token string">&#39;background&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> colorValue\n        \t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        \t\t\t\t<span class="token keyword">let</span> colorName <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        \t\t\t\t<span class="token keyword">switch</span><span class="token punctuation">(</span>colorName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \t\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;white&#39;</span><span class="token operator">:</span>\n        \t\t\t\t\t\ttempObj<span class="token punctuation">[</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">[</span><span class="token string">&quot;white&quot;</span><span class="token punctuation">]</span>\n        \t\t\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n        \t\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;black&#39;</span><span class="token operator">:</span>\n        \t\t\t\t\t\ttempObj<span class="token punctuation">[</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">[</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">]</span>\n        \t\t\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n                  <span class="token keyword">case</span> <span class="token string">&#39;transparent&#39;</span><span class="token operator">:</span>\n        \t\t\t\t\t\ttempObj<span class="token punctuation">[</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">[</span><span class="token string">&quot;transparent&quot;</span><span class="token punctuation">]</span>\n        \t\t\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n                  <span class="token keyword">case</span> <span class="token string">&#39;current&#39;</span><span class="token operator">:</span>\n        \t\t\t\t\t\ttempObj<span class="token punctuation">[</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">[</span><span class="token string">&quot;current&quot;</span><span class="token punctuation">]</span>\n        \t\t\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n        \t\t\t\t\t<span class="token keyword">default</span><span class="token operator">:</span>\n        \t\t\t\t\t\t<span class="token keyword">let</span> colorName <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// blue</span>\n        \t\t\t\t\t\t<span class="token keyword">let</span> colorShade <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// 200</span>\n        \t\t\t\t\t\ttempObj<span class="token punctuation">[</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">[</span>colorName<span class="token punctuation">]</span><span class="token punctuation">[</span>colorShade<span class="token punctuation">]</span><span class="token punctuation">;</span> \n        \t\t\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n        \t\t\t\t<span class="token punctuation">}</span>\n        \t\t\t<span class="token punctuation">}</span>\n              <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">case</span> shortProp<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token operator">:</span>\n        \t\t\ttempObj<span class="token punctuation">[</span><span class="token function">extValues</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token operator">*</span><span class="token number">4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span>\n        \t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">case</span> property<span class="token operator">===</span><span class="token string">&#39;shadow&#39;</span><span class="token operator">:</span>\n              <span class="token keyword">let</span> Xcor <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">&#39;0px&#39;</span><span class="token punctuation">;</span>\n              <span class="token keyword">let</span> Ycor <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">&#39;2px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// blue</span>\n        \t\t\t<span class="token keyword">let</span> blurValue <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">&#39;4px&#39;</span><span class="token punctuation">;</span>\n        \t\t\t<span class="token keyword">let</span> spreadValue <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">&#39;1px&#39;</span><span class="token punctuation">;</span>\n        \t\t\t<span class="token keyword">let</span> colorValue <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">&#39;#FFFFFF33&#39;</span><span class="token punctuation">;</span>\n        \t\t\ttempObj<span class="token punctuation">[</span><span class="token string">&#39;boxShadow&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Xcor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Ycor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>blurValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>spreadValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>colorValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n              <span class="token keyword">break</span><span class="token punctuation">;</span>\n           \t<span class="token keyword">default</span><span class="token operator">:</span>\n           \t\ttempObj<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value\n        \t<span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n    \ttempObj<span class="token punctuation">.</span>transform <span class="token operator">=</span> tempObj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">{</span>\n    \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no transform&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> tempObj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">simpleCvt</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> propsArray <span class="token operator">=</span> <span class="token function">splitClasses</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    propsArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">const</span> property <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        <span class="token keyword">const</span> value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        tempObj<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> tempObj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">animation</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>enter<span class="token punctuation">,</span>enterFrom<span class="token punctuation">,</span>enterTo<span class="token punctuation">,</span>direction<span class="token operator">=</span><span class="token string">&quot;alternate&quot;</span><span class="token punctuation">,</span>hiddenFlag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>easing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      if( animate</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> === undefined ){\n        animate</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = element</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.animate(\n          [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enterFrom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enterTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">],\n\t\t  \t\t{\n            id:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;,\n            direction:&quot;normal&quot;,\n            fill:&quot;both&quot;,\n\t\t  \t\t\tduration:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enter<span class="token punctuation">)</span><span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">200</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,\n\t\t  \t\t\tdelay:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enter<span class="token punctuation">)</span><span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">0</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,\n            easing:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>easing<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;,\n\t\t  \t\t}\n\t\t    );\n        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hiddenFlag <span class="token operator">?</span> `\n          animate$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function-variable function">onfinish</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>animate$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span>playbackRate<span class="token operator">===</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              element$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;hidden&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n        </span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        $<span class="token punctuation">{</span> direction<span class="token operator">===</span><span class="token string">&quot;forward&quot;</span><span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">animate</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.playbackRate = +1</span><span class="token template-punctuation string">`</span></span><span class="token operator">:</span> <span class="token punctuation">(</span>\n            direction<span class="token operator">===</span><span class="token string">&quot;backward&quot;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">animate</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.playbackRate = -1</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n              animate</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.playbackRate === +1 ? animate</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.playbackRate = -1 : animate</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.playbackRate = +1\n            </span><span class="token template-punctuation string">`</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">}</span>\n        animate$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span>ready<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n          animate$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  )\n}\nfunction animationFrom(uid,enter,enterFrom,enterTo,easing){\n  return (\n      </span><span class="token template-punctuation string">`</span></span>\n      <span class="token keyword">let</span> animateForward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span> animateForward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        animateForward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span> <span class="token operator">=</span> element$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>\n          <span class="token punctuation">[</span>$<span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enterFrom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>$<span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enterTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t  \t\t<span class="token punctuation">{</span>\n            id<span class="token operator">:</span><span class="token string">&quot;${uid}&quot;</span><span class="token punctuation">,</span>\n            direction<span class="token operator">:</span><span class="token string">&quot;normal&quot;</span><span class="token punctuation">,</span>\n            fill<span class="token operator">:</span><span class="token string">&quot;both&quot;</span><span class="token punctuation">,</span>\n\t\t  \t\t\tduration<span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enter<span class="token punctuation">)</span><span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t  \t\t\tdelay<span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enter<span class="token punctuation">)</span><span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            easing<span class="token operator">:</span><span class="token string">&quot;${easing}&quot;</span><span class="token punctuation">,</span>\n\t\t  \t\t<span class="token punctuation">}</span>\n\t\t    <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        animateForward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span>playbackRate <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n        animateForward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span>ready<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n          e<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  )\n}\nfunction animationTo(uid,enter,enterFrom,enterTo,hiddenFlag=false,easing){\n  return (\n      </span><span class="token template-punctuation string">`</span></span>\n      <span class="token keyword">let</span> animateBackward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span> animateBackward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        animateBackward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span> <span class="token operator">=</span> element$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>\n          <span class="token punctuation">[</span>$<span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enterFrom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>$<span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enterTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t  \t\t<span class="token punctuation">{</span>\n            id<span class="token operator">:</span><span class="token string">&quot;${uid}&quot;</span><span class="token punctuation">,</span>\n            direction<span class="token operator">:</span><span class="token string">&quot;normal&quot;</span><span class="token punctuation">,</span>\n            fill<span class="token operator">:</span><span class="token string">&quot;both&quot;</span><span class="token punctuation">,</span>\n\t\t  \t\t\tduration<span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enter<span class="token punctuation">)</span><span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t  \t\t\tdelay<span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">cvt</span><span class="token punctuation">(</span>enter<span class="token punctuation">)</span><span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            easing<span class="token operator">:</span><span class="token string">&quot;${easing}&quot;</span><span class="token punctuation">,</span>\n\t\t  \t\t<span class="token punctuation">}</span>\n\t\t    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        $<span class="token punctuation">{</span>hiddenFlag <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          animateBackward</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.onfinish = function() {\n              element</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.classList.add(&#39;hidden&#39;);\n              console.log(element</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.classList)\n          }\n        </span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        animateBackward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span>playbackRate <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        animateBackward$<span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  )\n}\n\nconst ValuesArray = [\n\t[&#39;h&#39;,&#39;height&#39;],\n\t[&#39;bg&#39;,&#39;background&#39;],\n\t[&#39;p&#39;, &#39;padding&#39;],\n\t[&#39;m&#39;, &#39;margin&#39;],\n\t[&#39;t&#39;, &#39;top&#39;],\n\t[&#39;r&#39;,&#39;right&#39;],\n\t[&#39;l&#39;,&#39;left&#39;],\n\t[&#39;t&#39;,&#39;top&#39;],\n];\nconst shortProp=[&#39;h&#39;,&#39;bg&#39;,&#39;p&#39;,&#39;m&#39;,&#39;t&#39;,&#39;r&#39;,&#39;l&#39;,&#39;t&#39;];\nconst extended = new Map(ValuesArray);\n// to convert pt to padding-top\nconst extValues = (propsStr,joiningValue) =&gt; {\n\t// a is like &#39;pt&#39; or &#39;p&#39;\n\tif(propsStr.length===1){\n\t\t// check it is &#39;p&#39;\n\t\treturn extended.get(propsStr)\n\t}else{\n\t\t// if it is &#39;pt&#39;\n\t\tlet propsArray = propsStr.split(&#39;&#39;) // [&#39;p&#39;,&#39;t&#39;]\n\t\tlet extendedArray = []\n\t\tpropsArray.forEach((props)=&gt;{\n\t\t\t// getting &#39;p&#39; then converting it to extended form which is padding\n\t\t\textendedArray = [...extendedArray, extended.get(props)]\n\t\t})\n\t\t// returning padding-top here,\n\t\treturn extendedArray.join(joiningValue)\n\t}\n}\nconst colors = {\n  transparent: &#39;transparent&#39;,\n  current: &#39;currentColor&#39;,\n  black: &#39;#000&#39;,\n  white: &#39;#fff&#39;,\n  slate: {\n    50: &#39;#f8fafc&#39;,\n    100: &#39;#f1f5f9&#39;,\n    200: &#39;#e2e8f0&#39;,\n    300: &#39;#cbd5e1&#39;,\n    400: &#39;#94a3b8&#39;,\n    500: &#39;#64748b&#39;,\n    600: &#39;#475569&#39;,\n    700: &#39;#334155&#39;,\n    800: &#39;#1e293b&#39;,\n    900: &#39;#0f172a&#39;,\n  },\n  gray: {\n    50: &#39;#f9fafb&#39;,\n    100: &#39;#f3f4f6&#39;,\n    200: &#39;#e5e7eb&#39;,\n    300: &#39;#d1d5db&#39;,\n    400: &#39;#9ca3af&#39;,\n    500: &#39;#6b7280&#39;,\n    600: &#39;#4b5563&#39;,\n    700: &#39;#374151&#39;,\n    800: &#39;#1f2937&#39;,\n    900: &#39;#111827&#39;,\n  },\n  zinc: {\n    50: &#39;#fafafa&#39;,\n    100: &#39;#f4f4f5&#39;,\n    200: &#39;#e4e4e7&#39;,\n    300: &#39;#d4d4d8&#39;,\n    400: &#39;#a1a1aa&#39;,\n    500: &#39;#71717a&#39;,\n    600: &#39;#52525b&#39;,\n    700: &#39;#3f3f46&#39;,\n    800: &#39;#27272a&#39;,\n    900: &#39;#18181b&#39;,\n  },\n  neutral: {\n    50: &#39;#fafafa&#39;,\n    100: &#39;#f5f5f5&#39;,\n    200: &#39;#e5e5e5&#39;,\n    300: &#39;#d4d4d4&#39;,\n    400: &#39;#a3a3a3&#39;,\n    500: &#39;#737373&#39;,\n    600: &#39;#525252&#39;,\n    700: &#39;#404040&#39;,\n    800: &#39;#262626&#39;,\n    900: &#39;#171717&#39;,\n  },\n  stone: {\n    50: &#39;#fafaf9&#39;,\n    100: &#39;#f5f5f4&#39;,\n    200: &#39;#e7e5e4&#39;,\n    300: &#39;#d6d3d1&#39;,\n    400: &#39;#a8a29e&#39;,\n    500: &#39;#78716c&#39;,\n    600: &#39;#57534e&#39;,\n    700: &#39;#44403c&#39;,\n    800: &#39;#292524&#39;,\n    900: &#39;#1c1917&#39;,\n  },\n  red: {\n    50: &#39;#fef2f2&#39;,\n    100: &#39;#fee2e2&#39;,\n    200: &#39;#fecaca&#39;,\n    300: &#39;#fca5a5&#39;,\n    400: &#39;#f87171&#39;,\n    500: &#39;#ef4444&#39;,\n    600: &#39;#dc2626&#39;,\n    700: &#39;#b91c1c&#39;,\n    800: &#39;#991b1b&#39;,\n    900: &#39;#7f1d1d&#39;,\n  },\n  orange: {\n    50: &#39;#fff7ed&#39;,\n    100: &#39;#ffedd5&#39;,\n    200: &#39;#fed7aa&#39;,\n    300: &#39;#fdba74&#39;,\n    400: &#39;#fb923c&#39;,\n    500: &#39;#f97316&#39;,\n    600: &#39;#ea580c&#39;,\n    700: &#39;#c2410c&#39;,\n    800: &#39;#9a3412&#39;,\n    900: &#39;#7c2d12&#39;,\n  },\n  amber: {\n    50: &#39;#fffbeb&#39;,\n    100: &#39;#fef3c7&#39;,\n    200: &#39;#fde68a&#39;,\n    300: &#39;#fcd34d&#39;,\n    400: &#39;#fbbf24&#39;,\n    500: &#39;#f59e0b&#39;,\n    600: &#39;#d97706&#39;,\n    700: &#39;#b45309&#39;,\n    800: &#39;#92400e&#39;,\n    900: &#39;#78350f&#39;,\n  },\n  yellow: {\n    50: &#39;#fefce8&#39;,\n    100: &#39;#fef9c3&#39;,\n    200: &#39;#fef08a&#39;,\n    300: &#39;#fde047&#39;,\n    400: &#39;#facc15&#39;,\n    500: &#39;#eab308&#39;,\n    600: &#39;#ca8a04&#39;,\n    700: &#39;#a16207&#39;,\n    800: &#39;#854d0e&#39;,\n    900: &#39;#713f12&#39;,\n  },\n  lime: {\n    50: &#39;#f7fee7&#39;,\n    100: &#39;#ecfccb&#39;,\n    200: &#39;#d9f99d&#39;,\n    300: &#39;#bef264&#39;,\n    400: &#39;#a3e635&#39;,\n    500: &#39;#84cc16&#39;,\n    600: &#39;#65a30d&#39;,\n    700: &#39;#4d7c0f&#39;,\n    800: &#39;#3f6212&#39;,\n    900: &#39;#365314&#39;,\n  },\n  green: {\n    50: &#39;#f0fdf4&#39;,\n    100: &#39;#dcfce7&#39;,\n    200: &#39;#bbf7d0&#39;,\n    300: &#39;#86efac&#39;,\n    400: &#39;#4ade80&#39;,\n    500: &#39;#22c55e&#39;,\n    600: &#39;#16a34a&#39;,\n    700: &#39;#15803d&#39;,\n    800: &#39;#166534&#39;,\n    900: &#39;#14532d&#39;,\n  },\n  emerald: {\n    50: &#39;#ecfdf5&#39;,\n    100: &#39;#d1fae5&#39;,\n    200: &#39;#a7f3d0&#39;,\n    300: &#39;#6ee7b7&#39;,\n    400: &#39;#34d399&#39;,\n    500: &#39;#10b981&#39;,\n    600: &#39;#059669&#39;,\n    700: &#39;#047857&#39;,\n    800: &#39;#065f46&#39;,\n    900: &#39;#064e3b&#39;,\n  },\n  teal: {\n    50: &#39;#f0fdfa&#39;,\n    100: &#39;#ccfbf1&#39;,\n    200: &#39;#99f6e4&#39;,\n    300: &#39;#5eead4&#39;,\n    400: &#39;#2dd4bf&#39;,\n    500: &#39;#14b8a6&#39;,\n    600: &#39;#0d9488&#39;,\n    700: &#39;#0f766e&#39;,\n    800: &#39;#115e59&#39;,\n    900: &#39;#134e4a&#39;,\n  },\n  cyan: {\n    50: &#39;#ecfeff&#39;,\n    100: &#39;#cffafe&#39;,\n    200: &#39;#a5f3fc&#39;,\n    300: &#39;#67e8f9&#39;,\n    400: &#39;#22d3ee&#39;,\n    500: &#39;#06b6d4&#39;,\n    600: &#39;#0891b2&#39;,\n    700: &#39;#0e7490&#39;,\n    800: &#39;#155e75&#39;,\n    900: &#39;#164e63&#39;,\n  },\n  sky: {\n    50: &#39;#f0f9ff&#39;,\n    100: &#39;#e0f2fe&#39;,\n    200: &#39;#bae6fd&#39;,\n    300: &#39;#7dd3fc&#39;,\n    400: &#39;#38bdf8&#39;,\n    500: &#39;#0ea5e9&#39;,\n    600: &#39;#0284c7&#39;,\n    700: &#39;#0369a1&#39;,\n    800: &#39;#075985&#39;,\n    900: &#39;#0c4a6e&#39;,\n  },\n  blue: {\n    50: &#39;#eff6ff&#39;,\n    100: &#39;#dbeafe&#39;,\n    200: &#39;#bfdbfe&#39;,\n    300: &#39;#93c5fd&#39;,\n    400: &#39;#60a5fa&#39;,\n    500: &#39;#3b82f6&#39;,\n    600: &#39;#2563eb&#39;,\n    700: &#39;#1d4ed8&#39;,\n    800: &#39;#1e40af&#39;,\n    900: &#39;#1e3a8a&#39;,\n  },\n  indigo: {\n    50: &#39;#eef2ff&#39;,\n    100: &#39;#e0e7ff&#39;,\n    200: &#39;#c7d2fe&#39;,\n    300: &#39;#a5b4fc&#39;,\n    400: &#39;#818cf8&#39;,\n    500: &#39;#6366f1&#39;,\n    600: &#39;#4f46e5&#39;,\n    700: &#39;#4338ca&#39;,\n    800: &#39;#3730a3&#39;,\n    900: &#39;#312e81&#39;,\n  },\n  violet: {\n    50: &#39;#f5f3ff&#39;,\n    100: &#39;#ede9fe&#39;,\n    200: &#39;#ddd6fe&#39;,\n    300: &#39;#c4b5fd&#39;,\n    400: &#39;#a78bfa&#39;,\n    500: &#39;#8b5cf6&#39;,\n    600: &#39;#7c3aed&#39;,\n    700: &#39;#6d28d9&#39;,\n    800: &#39;#5b21b6&#39;,\n    900: &#39;#4c1d95&#39;,\n  },\n  purple: {\n    50: &#39;#faf5ff&#39;,\n    100: &#39;#f3e8ff&#39;,\n    200: &#39;#e9d5ff&#39;,\n    300: &#39;#d8b4fe&#39;,\n    400: &#39;#c084fc&#39;,\n    500: &#39;#a855f7&#39;,\n    600: &#39;#9333ea&#39;,\n    700: &#39;#7e22ce&#39;,\n    800: &#39;#6b21a8&#39;,\n    900: &#39;#581c87&#39;,\n  },\n  fuchsia: {\n    50: &#39;#fdf4ff&#39;,\n    100: &#39;#fae8ff&#39;,\n    200: &#39;#f5d0fe&#39;,\n    300: &#39;#f0abfc&#39;,\n    400: &#39;#e879f9&#39;,\n    500: &#39;#d946ef&#39;,\n    600: &#39;#c026d3&#39;,\n    700: &#39;#a21caf&#39;,\n    800: &#39;#86198f&#39;,\n    900: &#39;#701a75&#39;,\n  },\n  pink: {\n    50: &#39;#fdf2f8&#39;,\n    100: &#39;#fce7f3&#39;,\n    200: &#39;#fbcfe8&#39;,\n    300: &#39;#f9a8d4&#39;,\n    400: &#39;#f472b6&#39;,\n    500: &#39;#ec4899&#39;,\n    600: &#39;#db2777&#39;,\n    700: &#39;#be185d&#39;,\n    800: &#39;#9d174d&#39;,\n    900: &#39;#831843&#39;,\n  },\n  rose: {\n    50: &#39;#fff1f2&#39;,\n    100: &#39;#ffe4e6&#39;,\n    200: &#39;#fecdd3&#39;,\n    300: &#39;#fda4af&#39;,\n    400: &#39;#fb7185&#39;,\n    500: &#39;#f43f5e&#39;,\n    600: &#39;#e11d48&#39;,\n    700: &#39;#be123c&#39;,\n    800: &#39;#9f1239&#39;,\n    900: &#39;#881337&#39;,\n  },\n  get lightBlue() {\n    return this.sky\n  },\n  get warmGray() {\n    return this.stone\n  },\n  get trueGray() {\n    return this.neutral\n  },\n  get coolGray() {\n    return this.gray\n  },\n  get blueGray() {\n    return this.slate\n  },\n}\nconst {\n  as = &quot;&quot;,\n  clx=&quot;&quot;,\n  sty=&quot;&quot;,\n  uid=&quot;a&quot;,toId=&quot;&quot;,\n  show=false,\n  easing=&quot;ease-in-out&quot;,\n  direction=&quot;&quot;,\n  enter=&quot;&quot;, enterFrom=&quot;&quot;, enterTo=&quot;&quot;,\n  leave=&quot;&quot;, leaveFrom=&quot;&quot;, leaveTo=&quot;&quot;, \n  event=&quot;&quot;, enterEvent=&quot;&quot;, leaveEvent=&quot;&quot; ,\n  hiddenFlag=false\n} = Astro.props;\n\n---\n&lt;div class={clx} style={sty} id={uid} data-show={</span><span class="token template-punctuation string">`</span></span>$<span class="token punctuation">{</span>show<span class="token punctuation">}</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">} &gt;\n  &lt;slot /&gt;\n&lt;/div&gt;\n\n{</span><span class="token template-punctuation string">`</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  let element${uid} = document.getElementById(&#39;${uid}&#39;) ;\n  ${ leave===&quot;&quot; ? `\n      let animate${uid};\n      document.getElementById(&#39;${toId}&#39;).addEventListener(&#39;${event}&#39;,()=&gt;{\n          element${uid}.classList.remove(&#39;hidden&#39;);\n          ${animation( uid, enter, enterFrom, enterTo, direction, hiddenFlag,easing )}\n      });\n  ` :( enterEvent===&quot;&quot; &amp;&amp; leaveEvent===&quot;&quot; ? `\n          document.getElementById(&#39;${toId}&#39;).addEventListener(&#39;${event}&#39;,()=&gt;{\n            if(element${uid}.dataset.show===&#39;false&#39;) {\n              element${uid}.classList.remove(&#39;hidden&#39;);\n              ${animationFrom( uid, enter, enterFrom, enterTo,easing)}\n            } else {\n              ${animationTo( uid, leave, leaveFrom, leaveTo, hiddenFlag,easing)}\n            }\n          element${uid}.dataset.show === &#39;true&#39; ? element${uid}.dataset.show = &#39;false&#39; : element${uid}.dataset.show = &#39;true&#39;\n      });\n      ` :`\n      document.getElementById(&#39;${toId}&#39;).addEventListener(&#39;${enterEvent}&#39;,()=&gt;{\n              element${uid}.classList.remove(&#39;hidden&#39;);\n              ${animationFrom( uid, enter, enterFrom, enterTo, easing)}\n      });\n      document.getElementById(&#39;${toId}&#39;).addEventListener(&#39;${leaveEvent}&#39;,()=&gt;{\n              ${animationTo( uid, leave, leaveFrom, leaveTo, hiddenFlag,easing)}\n      });\n  ` )}\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>`<span class="token punctuation">}</span>\n</code></pre></div>',1)];var c=n(o,[["render",function(n,t,p,o,c,u){return a(),s("div",null,e)}]]);export{p as __pageData,c as default};
